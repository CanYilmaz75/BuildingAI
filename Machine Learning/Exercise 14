import math
import random
import numpy as np
import io
from io import StringIO
import numpy as np
data = [[1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 0, 1, 3, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1]]

def distance(row1, row2):
    return sum([abs(x-y) for x, y in zip(row1, row2)])


def find_nearest_pair(data):
    # Initialize the variables
    N = len(data)
    dist = np.empty((N, N), dtype=float)

    for ix1, row1 in enumerate(data):
        # Assign the value np.inf as the exercised said
        dist[ix1, ix1] = np.inf

        for ix2, row2 in enumerate(data[ix1+1:]):
            # Calculate the distance
            dist_sum = distance(row1, row2)

            # Assign the value into the 2D array of distances
            dist[ix1, ix1+ix2+1] = dist_sum
            dist[ix1+ix2+1, ix1] = dist_sum

    # Print the index of the element with the lowest value in a 2D array
    print(np.unravel_index(np.argmin(dist), dist.shape))

find_nearest_pair(data)
